" Vundle init
set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'gmarik/Vundle.vim'

" Generic
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'godlygeek/tabular'
Plugin 'scrooloose/nerdcommenter'
Plugin 'bling/vim-airline'
Plugin 'tpope/vim-fugitive'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'mileszs/ack.vim'
Plugin 'Shougo/unite.vim'
Plugin 'Shougo/vimproc.vim'

" Filetypes
Plugin 'scrooloose/syntastic'
Plugin 'tpope/vim-markdown'
Plugin 'groenewege/vim-less'
Plugin 'marijnh/tern_for_vim'
Plugin 'othree/javascript-libraries-syntax.vim'
Plugin 'tfnico/vim-gradle'
Plugin 'mxw/vim-jsx'

" Colorschemes
Plugin 'altercation/vim-colors-solarized'
Plugin 'crusoexia/vim-monokai'
Plugin 'w0ng/vim-hybrid'
call vundle#end()

syntax on
filetype plugin indent on

" Basic configuration
set ic
set scs
set autoindent
set smartindent
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set showmatch
set vb t_vb=
set incsearch
set number
set wrap linebreak nolist
set foldmethod=indent
set foldnestmax=10
set nofoldenable
set foldlevel=1
set undodir=~/.vimundo//
set backupdir=~/.vimbak//
set directory=~/.vimswp//
set mouse=a

" NERDTree
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1

" Appearance
let g:hybrid_use_iTerm_colors = 1
colorscheme hybrid
set guifont=Inconsolata-g:h10

" Convenience Bindings
let mapleader = ","
map ; :
map H ^
map L $
map <C-B> <C-6>
map K i<CR><Esc>k$
map <Space> 10j
map <BS> 10k
map <C-n> :bnext<CR>
map <C-p> :bprev<CR>
inoremap jj <Esc>
noremap j gj
noremap k gk
nnoremap <D-i> <C-a>
nmap <leader>T :set titlestring=[]\ %f<left><left><left><left><left>
map <leader>d :call FillLine( '-' )<CR>

" Completion
set completeopt=menuone,longest
inoremap <C-Space> <C-n>
inoremap <C-S-Space> <C-p>
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<CR>"

" Window split bindings
map <C-J> <C-W>j
map <C-K> <C-W>k
map <C-H> <C-W>h
map <C-L> <C-W>l

" Ack
let g:ackprg = 'ag --nogroup --nocolor --column'
let g:ack_mappings = { "v": "<C-w><CR><C-w>L<C-w>h<C-w>j<C-w>J<C-w>10_<C-w>k<C-w>l<C-w>l" }
nmap <leader>a :Ack!<space>''<left>
nmap <leader>c :Ack!<CR>
nmap <D-F> :Ack!<space>''<left>

" NERDTree
map <D-0> :NERDTreeTabsToggle<CR>
map <D-l> :NERDTreeFind<CR>

" EasyMotion
let g:EasyMotion_do_mapping = 0 " Disable default mappings
let g:EasyMotion_smartcase = 1
nmap <leader>s <Plug>(easymotion-s2)
map <leader>f <Plug>(easymotion-e)
map <leader>F <Plug>(easymotion-b)

" Unite
let g:unite_source_rec_async_command = 'ag --follow --nocolor --nogroup --hidden -g ""'
let g:unite_source_history_yank_enable = 1
nnoremap <leader>t :<C-u>Unite -no-split -buffer-name=files -start-insert -default-action=tabopen file_rec/async<cr>
nnoremap <leader>s :<C-u>Unite -no-split -buffer-name=files -start-insert -default-action=split file_rec/async<cr>
nnoremap <leader>v :<C-u>Unite -no-split -buffer-name=files -start-insert -default-action=vsplit file_rec/async<cr>
nnoremap <leader>e :<C-u>Unite -no-split -buffer-name=files -start-insert file_rec/async<cr>
nnoremap <leader>y :<C-u>Unite -no-split -buffer-name=yank    history/yank<cr>
nnoremap <leader>b :<C-u>Unite -no-split -buffer-name=buffer  buffer<cr>
autocmd FileType unite call s:unite_settings()
function! s:unite_settings()
  nmap <buffer> <Space> 10j
  nmap <buffer> <BS> 10k
endfunction

" Statusbar
set laststatus=2
let g:airline#extensions#whitespace#enabled = 1

" JS Syntax coloring
let g:used_javascript_libs = 'underscore,angularjs,angularui,jquery'

" Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_javascript_checkers = ['eslint']

" Filetype specific commands
autocmd FileType javascript setlocal omnifunc=tern#Complete
let g:jsx_ext_required = 0 " Allow JSX in normal JS files

" Fill rest of line with characters
" http://stackoverflow.com/questions/3364102/how-to-fill-a-line-with-character-x-up-to-column-y-using-vim
function! FillLine( str )
  let tw = 80
  .s/[[:space:]]*$//
  let reps = (tw - col("$")) / len(a:str)
  if reps > 0
    .s/$/\=(' '.repeat(a:str, reps))/
  endif
endfunction
